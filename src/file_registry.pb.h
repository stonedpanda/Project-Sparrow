// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_registry.proto

#ifndef PROTOBUF_file_5fregistry_2eproto__INCLUDED
#define PROTOBUF_file_5fregistry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace file_registry {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fregistry_2eproto();
void protobuf_AssignDesc_file_5fregistry_2eproto();
void protobuf_ShutdownFile_file_5fregistry_2eproto();

class File;
class Registry;

// ===================================================================

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();
  
  File(const File& from);
  
  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();
  
  void Swap(File* other);
  
  // implements Message ----------------------------------------------
  
  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  inline bool active() const;
  inline void set_active(bool value);
  
  // required string hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string path = 4;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 4;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:file_registry.File)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hash_;
  ::std::string* name_;
  ::std::string* path_;
  bool active_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_5fregistry_2eproto();
  friend void protobuf_AssignDesc_file_5fregistry_2eproto();
  friend void protobuf_ShutdownFile_file_5fregistry_2eproto();
  
  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class Registry : public ::google::protobuf::Message {
 public:
  Registry();
  virtual ~Registry();
  
  Registry(const Registry& from);
  
  inline Registry& operator=(const Registry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry& default_instance();
  
  void Swap(Registry* other);
  
  // implements Message ----------------------------------------------
  
  Registry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry& from);
  void MergeFrom(const Registry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .file_registry.File file = 1;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::file_registry::File& file(int index) const;
  inline ::file_registry::File* mutable_file(int index);
  inline ::file_registry::File* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::file_registry::File >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::file_registry::File >*
      mutable_file();
  
  // @@protoc_insertion_point(class_scope:file_registry.Registry)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::file_registry::File > file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_5fregistry_2eproto();
  friend void protobuf_AssignDesc_file_5fregistry_2eproto();
  friend void protobuf_ShutdownFile_file_5fregistry_2eproto();
  
  void InitAsDefaultInstance();
  static Registry* default_instance_;
};
// ===================================================================


// ===================================================================

// File

// required bool active = 1;
inline bool File::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool File::active() const {
  return active_;
}
inline void File::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// required string hash = 2;
inline bool File::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& File::hash() const {
  return *hash_;
}
inline void File::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void File::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void File::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* File::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 3;
inline bool File::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& File::name() const {
  return *name_;
}
inline void File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 4;
inline bool File::has_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void File::set_has_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void File::clear_has_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void File::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& File::path() const {
  return *path_;
}
inline void File::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void File::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void File::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* File::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Registry

// repeated .file_registry.File file = 1;
inline int Registry::file_size() const {
  return file_.size();
}
inline void Registry::clear_file() {
  file_.Clear();
}
inline const ::file_registry::File& Registry::file(int index) const {
  return file_.Get(index);
}
inline ::file_registry::File* Registry::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::file_registry::File* Registry::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::file_registry::File >&
Registry::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::file_registry::File >*
Registry::mutable_file() {
  return &file_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_registry

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fregistry_2eproto__INCLUDED
